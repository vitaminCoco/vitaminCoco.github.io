Redux
Redux是一个有用的架构，但不是非用不可。如果UI层非常简单，没有很多互动，Redux就是不必要的，用了反而增加复杂性。她只是Web架构的一种解决方案，也可以选择其他方案。
（1）用户的使用方式非常简单
（2）用户之间没有写作
（3）不需要与服务器大量交互，也没有使用websocket
（4）视图层（View）只从单一来源获取数据
上面这些情况，都不需要使用Redux。相反的就需要使用Redux：多交互、多数据源
从组件角度看，以下情况适用Redux。
（1）某个组件的状态，需要共享
（2）某个状态需要在任何地方都能拿到
（3）一个组件需要改变全局状态
（4）一个组件需要改变另一个组件的状态

Redux的设计思想：
（1）web应用是一个状态机，视图与状态一一对应
（2）所有的状态，保存在一个对象里面。

Store
1.Store就是保存数据的地方，可以把它看做一个容器。整个应用只能有一个Store。
2.Redux提供createStore这个函数，用来生成Store。
	import {createStore} from "redux";
	const store = createStore(fn);
	createStore函数接收另一个函数作为参数，返回新生成的Store对象。

State
1.Store对象包含所有数据，如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合，叫做State。
2.当前时刻的State，可以通过store.getState()拿到
	import {createStore} from "redux";
	const store = createStore(fn);
	const state = store.getState();
Redux规定，一个State对应一个View，只要State相同，View就相同。

Action
1.State的变化会导致View的变化，但是，用户接触不到State，只能接触到View。所以，State的变化必须是View导致的。Action就是View发出的通知，表示State应该要发生变化了。
2.Action是一个对象，其中的type属性是必须的，表示Action的名称。其他属性可以自由设置。
	const action = {
	     type:"ADD_T0DO",
	     payload:"Learn Redux"   Action携带的信息是字符串
        };
Action描述当前发生的事情。改变State的唯一办法，就是使用Action。他会运送数据到Store。

Action Creator
View要发送多少种消息，就会有多少种Action，如果都手写，会很麻烦，可以定义一个函数来生成Action，这个函数就叫Action Creator。
	const ADD_TODO = "添加TODO";
	function addTodo(text){  addTodo函数就是一个Action Creator.
	   return {
		type:ADD_TODO,
	        text
           }
        }
        const action = addTodo("Learn Redux");


store.dispatch()
store.dispatch()是View发出Action的唯一办法。
	import {createStore} from "redux";
	const store = createStore(fn);
	store.dispatch({
	   type:"ADD_TODO",
	   payload:"learn redux"
	})
store.dispatch()接收一个Action对象作为参数，将它发送出去。也可以结合Action Creator
	store.dispatch(addTodo("learn redux"));


Reducer
1.Store收到Action后，必须给出一个新的State，这样View才会发生变化。这种State的计算过程就叫做Reducer。
2.Reducer是一个函数，他接收Action和当前State作为参数，返回一个新的State。
	const reducer = function(state,action){return new_state}
3.整个应用的初始状态，可以作为State的默认值。
	const defaultState = 0;
	const reducer = (state=defaultState,action)=>{
	   switch (action.type){
		case:"ADD":
		   return state+action.payload;
		   default:return state;
	    }
	};
	const state = reducer(1,{
		type:"ADD",
		payload:2
	});
实际应用中，Reducer函数不用手动调用，store.dispatch方法会触发Reducer的自动执行。为此，Store需要知道Reducer函数，做法就是在生成Store的时候，将Reducer传入createStore方法。
	import {createStore} from "redux";
	const store = createStore(reducer);
createStore接收Reducer作为参数，生成一个新的Store，以后每当store.dispatch发送过来一个新的Action，就会自动调用Reducer，得到新的State。
4.Reducer函数可以作为数组的reduce方法的参数。例如一系列Action对象按照顺序作为一个数组。
	const actions = [
	     {type:"ADD",payload:0},
	     {type:"ADD",payload:1},
	     {type:"ADD",payload:2}
	];
	const total = actions.reduce(reducer,0) ;//3 数组的reduce方法接收Reducer函数作为参数，就可以直接	得到最终的状态3.

纯函数
1.Reducer函数最重要的特征是，他是一个纯函数，也就是说，只要是同样的输入，必定得到同样的输出。
纯函数是函数式编程的概念，必须遵守以下一些约束。
（1）不得改写参数
（2）不能调用系统I/0的API
（3）不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果。
2.由于Reducer是纯函数，就可以保证同样的State，必定得到同样的View。也正是因为这一点，Reducer函数里面不能改变State，必须返回一个全新的对象。
	//State是一个对象
	function reducer(state,action){
	   return Object.assign({},state,{thingToChange});
	   //或者
	   return {...state,...newState};
	}
	//State是一个数组
	function reducer(state,action){
	    return [..state,newItem];
	}
最好把State对象设为只读，你没法改变它，要得到新的State，唯一办法就是生成一个新对象，这样的好处是，任何时候，与某个View对应的State总是一个不变的对象。

store.subscribe()
1.Stor法允许使用store.subscribe方法设置监听函数，一旦State发生变化，就自动执行这个函数。
	import {createStore} from "redux";
	const store = createStore(reducer);
	store.subscribe(listener);
显然，只要把View的更新函数（对于React项目，就是组件的render方法或setState方法）放入listen，就会实现View的自动渲染。
2.store.subscribe方法返回一个函数，调用这个函数就可以解除监听。
	let unsubscribe = store.subscribe(()=>
	   console.log(store.getState())
	);
	unsubscribe();


Store的实现
1.Store提供了三个方法：
	store.getState()
	store.dispatch()
	store.subscribe()
	import {createStore} from "redux";
	let {subscribe,dispatch,getState} = createStore(reducer);
2.createStore方法还可以接收第二个参数，表示State的最初状态，这通常是服务器给出的。
	let store = createStore(todoApp,window.STATE_FROM_SERVER）
window.STATE_FROM_SERVER就是整个应用的状态初始值，如果提供了这个参数，它会覆盖Reducer函数的默认初始值。
3.createStore方法的简单实现：
const createStore = (reducer)=>{
    let state;
    let listeners = [];
    const getStste = () => state;
    const dispatch = (action) => {
	state = reducer(state,action);
	listeners.forEach(listener => listener());
    };
    const subscribe = (listener) => {
	listeners.push(listener);
	return ()=> {
	   listeners = listeners.filter(1 => 1 !== listener);
	}
    };
    dispatch({});
    return {getState,dispatch,subscribe};
};


Reducer的拆分
1.Reducer函数负责生成State。由于整个应用只有一个State对象，包含所有数据，对于大型应用来说，这个State必然十分庞大，导致Reducer函数也十分庞大。
例如：
    const chatReducer = (state=defaultState,action={})=>{
	const {type,payload} = action;
	switch (type) {
	    case ADD_CHAT:
		return Object.assign({},state,{
		    chatLog:state.chatLog.concat(payload)
		});
	    case CHANGE_STATUS：
		return Object.assign({},state,{
		     statusMessage:payload
		});
	    case CHANGE_USERNAME：
		return Object.assign({},state,{
		     userName:payload
		});
	    default:return state;
	}
     };
     三种Action分别改变State的三个属性，这三个属性之间没有联系，这提示我们可以把Reducer函数拆分。不同的函数负责处理不同属性，最终把他们合并成一个大的Reducer即可。
     const chatReducer = (state=defaultState,action={})=>{
	return {
	     chatLog:chatLog(state.chatLog,action),
	     statusMessage:statusMessage(state.statusMessage,action),
	     userName:userName(state.userName,action)
	}
     };
这种拆分与React应用的解构相吻合：一个React根组件有很多子组件构成，就是说子组件与子Reducer完全可以对应。
2.Redux提供了一个combineReducers方法，用于Reducer的拆分。只要定义各子Reducer函数，然后用这个方法，将他们合成一个大的Reducer。
	import {combineReducers} from "redux";
	const chatReducer = combineReducers({
	  chatLog,
	  statusMessage,
	  userName
	})
	export default todoApp;
这种写法有一个前提，就是State的属性名必须与子Reducer同名，如果不同名，就要采用下面的写法：
	const reducer = combineReducers({
	   a:doSomethingWidthA,
           b:processB,
	   c:c
	})
	//等同于
	function reducer(state={},action){
	    return {
		a:doSomethingWidthA(state.a,action),
	 	b:processB(state.b,action),
		c:c(state.c,action)
	    }
	}
总之，combineReducers()做的就是产生一个整体的Reducers函数，该函数根据State的Key去执行相应的子Reducer，并将返回结果合并成一个大的State对象。
3.可以把所有子Reducer放在一个文件里面，然后统一引入。
	import {combineReducers} from "redux"
	import * as reducers from "./reducers"
	const reducer = combineReducers(reducers)



Redux的工作流程：
1.首先，用户发出Action：
	store.dispatch(action)
2.然后，Store自动调用Reducer，并且传入两个参数，当前State和收到的Action。Reducer会返回新的State。
	let nextState = todoApp(previousState,action);
State一旦有变化，Store就会调用监听函数
	//设置监听函数
	store.subscribe(listener);
listener可以通过store.getState()得到当前状态。如果使用的是React，这时可以触发重新渲染View。
	function listener(){
	   let newState = store.getState();
	   component.setState(newState);
	}


实例：计算器
https://github.com/reactjs/redux/tree/master/examples/counter


Action发出以后，Reducer立即算出State，这叫做同步；Action发出以后，过一段时间再执行Reducer，这就是异步。
Reducer在异步操作结束后自动执行要用到新的工具：中间件(middleware)

中间件
1.中间件就是一个函数，对store.dispatch方法进行了改造，在发出Action和执行Reducer这两部之间，添加了其他功能。
2.常用的中间件都有现成的，只要引用别人写好的模块即可，比如日志中间件：redux-logger模块。
	import {applyMiddleware,createStore} from "redux";
	import createLogger from "redux-logger";
	const logger = createLogger();
	const store=createStore(reducer,applyMiddleware(logger));
redux-logger提供一个生成器createLogger,可以生成日志中间件logger。然后，将它放在applyMiddleware方法之中，传入createStore方法，就完成了store.dispatch()的功能增强。
3.注意：
（1）createStore方法可以接收整个应用的初始状态作为参数，那样的话，applyMiddleware就是第三个参数了。
	const store = createStore(
	  reducer,
	  initial_state,
	  applyMiddleware(logger)
 	);
（2）中间件的次序有讲究
	const store = createStore（
	   reducer，
	   applyMiddleware(thunk,promise,logger)
	);
applyMiddleware方法由三个参数，就是三个中间件。有的中间件有次序要求，使用前要查一下文档，比如：logger就一定要放在最后，否则输出结果会不正确。

applyMiddlewares()
他是Redux的原生方法，作用是将所有中间件组成一个数组，依次执行。
	export default function applyMiddleware(..middlewares){
	    return (createStore) => (reducer,proloadedState,enhancer) => {
		var store = createStore(reducer,preloadedState,enhancer);
		var dispatch = store.dispatch;
		var chain = [];
		var middlewareAPI = {
		    getState:store.getState,
		    dispatch:(action) => dispatch(action)
		};
		chain = middlewares.map(middleware => middleware(middlewareAPI));
		dispatch = compose(...chain)(store.dispatch);
		return {...store,dispatch}
	    }
	}
        所有中间件被放进了一个数组chain，然后嵌套执行，最后执行store.dispatch。中间件内部（middlewareAPI）可以拿到getState和dispatch两个方法。


异步操作的基本思路：
1.同步操作只要发出一种Action即可，异步操作的差别是它要发出三种Action。
    操作发起时的Action
    操作成功时的Action
    操作失败时的Action
以向服务器取出数据为例，三种Action可以有两种不同的写法。
//写法一：名称相同，参数不同
{type:"FETCH_POSTS"}
{type:"FETCH_POSTS",status:"error",error:"0ops"}
{type:"FETCH_POSTS",status:"success",response:{..}}
//写法二：名称不同
{type:"FETCH_POSTS_REQUEST"}
{type:"FETCH_POSTS_FAILURE",error:"0ps"}
{type:"FETCH_POSTS_SUCCESS",response:{...}}
2.除了Action种类不同，异步操作的State也要进行改造
	let state = {
	    isFetching:true, //isFetching表示是否在抓取数据
	    didInvalidate:true, //didInvalidate表示数据是否过时
	    lastUpdated:"xxxx" //lastUpdate表示上一次更新时间
	};
异步操作的思路：
    操作开始时，送出一个Action，触发State，更新为“正在操作”状态，View重新渲染。
    操作结束时，再送出一个Action，触发State，更新为“操作结束”状态，View再一次重新渲染。


redux-thunk中间件
1.异步操作至少要送出两个Action：用户触发第一个Action，这个跟同步操作一样；操作结束时，系统自动送出第二个Action，奥妙在Action Creator。
	const fetchPosts = postTitle => (dispatch,getState) => {
	    dispatch(requestPosts(postTitle));
	    return fetch(`/some/API/${postTitle}.json`)
		.then(response => response.json())
		.then(json => dispatch(receivePosts(postTitle,json)));
	    };
	};
	//使用方法一
	store.dispatch(fetchPosts("reactjs"));
	//使用方法二
	store.dispatch(fetchPosts("reactjs")).then(()=>
	    console.log(store.getState())
	);
fetchPosts是一个Action Creator(动作生成器),返回一个函数。这个函数执行后，先发出一个Action(requestPosts(postTitle)),然后进行异步操作。拿到结果后，现将结果转成JSON格式，然后再发出一个Action（receivePosts（postTitle，json））
（1）fetchPosts返回了一个函数，而普通的Action Creator默认返回一个对象。
（2）返回的函数的参数是dispatch和getState这两个Redux方法，普通的Action Creator的参数是Action的内容
（3）在返回的函数之中，先发出一个Action（requestPosts（postTitle）），表示操作开始。
（4）异步操作结束之后，再发出一个Action（receivePosts（postTitle，json），表示操作结束。
这样的处理，就解决了自动发送第二个Action的问题。
2.Action是由store.dispatch方法发送的，而store.dispatch方法正常情况系，参数只能是对象，不能是函数，这时，就要使用中间件redux-thunk。
	import {createStore,applyMiddleware} from "redux";
	import thunk from "redux-thunk";
	import reducer from "./reducers";
	const store = createStore(
	     reducer,
	     applyMiddleware(thunk)
	);
redux-thunk中间件改造store.dispatch，使得后者可以接收函数作为参数。
3.异步操作的第一种解决方法就是，写出一个返回函数的Action Creator，然后使用redux-thunk中间件改造store.dispatch。


redux-promise中间件
另一种异步操作的解决方案，就是让Action Creator返回一个Promise对象，这时需要使用redux-promise中间件
	import {createStore,applyMiddleware} from "redux";
	import promiseMiddleware from "redux-promise";
	import reducer from "./reducers";
	const store = createStore(
	   reducer,
	   applyMiddleware(promiseMiddleware)
	);
这个中间件使得store.dispatch方法可以接受Promise对象作为参数。这时，Action Creator有两种写法：
（1）返回值是一个Promise对象
	const fetchPosts = (dispatch,postTitle)=>new Promise(function(resolve,reject){
		return fetch(`/some/API/${postTitle}.json`)
		   .then(response=>{
			type:"FETCH_POSTS",
			payload:response.json()
		   })
	})
（2）Action对象的payload属性是一个Promise对象，这需要从redux-action模块引入createAction方法。
	import {createAction} from "redux-action";
	class AsyncApp extends component{
	    componentDidMount(){
		const {dispatch,selectedPost} = this.props;
		//发出同步Action
		dispatch(requestPosts(selectedPost));
		//发出异步Action
		dispatch(createAction(
		   "FETCH_POSTS",
		    fetch(`/some/API/${postTitle}.json`)
		    .then(response=>response.json())
		));
	    }
	}
第二个dispatch方法发出的异步Action，只有等到操作结束，这个Action才会实际发出
注：createAction的第二个参数必须是一个Promise对象


React专用的库：React-Redux
React-Redux将所有的组件分成两大类：UI组件和容器组件
UI组件
（1）只负责UI的呈现，不带有任何业务逻辑
（2）没有状态（即不使用this.state这个变量）
（3）所有数据都由参数（this.props）提供
（4）不适用任何Redu的API
const Title = value => <h1>{value}</h1>
因为不含有状态，UI组件又称为“纯组件”，即它跟纯函数一样，纯粹由参数决定它的值。

容器组件
（1）负责管理数据和业务逻辑，不负责UI的呈现
（2）带有内部状态
（3）使用Redux的API
1.如果一个组件既有UI又有业务逻辑，将它拆分成：外面是一个容器组件，里面包含了一个UI组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图。
2.React-Redux规定，所有的UI组件都由用户提供，容器组件则是由React-Redux自动生成。也就是说，用户负责视觉层，状态管理则是全部交给他。



connect（）
1.React-Redux提供connect()方法，用于从UI组件生成容器组件，将这两种组件连起来。
	import {connect} from "react-redux";
	const VisibleTodoList = connect()(TodoList)
TodoList是UI组件，VisibleTodoList是有React-Redux通过connect方法自动生成的容器组件。但是没有定义业务逻辑，这个容器组件毫无意义。为了定义业务逻辑，需要给出下面两方面的信息：
（1）输入逻辑：外部的数据（即state对象）如何转换为UI组件的参数
（2）输出逻辑：用户发出的动作如何变成Action对象，从UI组件传出去
connect方法的完整API：
	import {connect} from "rreact-redux";
	const VisibileTodoList = connect(
	     mapStateToProps,
	     mapDispatchToProps
	)(TodoList)
connect方法接受两个参数：mapStateToProps和mapDispatchToProps.它们定义了UI组件的业务逻辑。前者负责输入逻辑，即将state映射到UI组件的参数（props），后者负责输出逻辑，即用户对UI组件的操作映射成Action。


mapStateToProps（）
1.mapStateToProps是一个函数，它的作用是建立一个从（外部的）state对象到(UI组件）props对象的映射关系。
2.作为函数，mapStateToProps执行后应该返回一个对象，里面的每一个键值对就是一个映射。
	const mapStateToProps = (state) => {
	    return {
		todos:getVisibleTodos(state.todos,state.visibilityFilter)
	    }
	}
	const getVisibleTodos = (todos,filter) => {
	    switch(filter){
		case "SHOW_ALL"：
		    return todos
		case "SHOW_COMPLETED":
		    reuturn todos.filter(t=>t.completed)
		case "SHOW_ACTIVE"：
		    return todos.filter(t=>!t.completed)
		default:
		    throw new Error("Unknown filter:"+filter)
	    }
	}
3.mapStateToProps会订阅Store，每当state更新的时候，就会自动执行，重新计算UI组件的参数，从而触发UI组件的重新渲染。
4.mapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象。
5.connect方法可以省略mapStateToProps参数，那样的话，UI组件就不会订阅Store，就是说Store的更新不会引起UI组件的更新。


mapDispatchToProps（）
1.mapDispatchToProps是connect的第二个参数，用来建立UI组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户操作应该当做Action，传给Store。它可以是一个函数，也可以是一个对象。
2.如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。
	const mapDispatchToProps = (
	     dispatch,
	     ownProps
	)=>{
	    return {
		onClick:()=>{
		     dispatch({
			type:"SET_VISIBILITY_FILTER"，
			filter：ownProps.filter
		     });
		}
	    }
	}
mapDispatchToProps作为函数，应该返回一个对象，该对象的每个键值对都是一个映射，定义了UI组件的参数怎样发出Action。
3.如果mapDispatchToProps是一个对象，它的每个键名也是对应UI组件的同名参数，键值应该是一个函数，会被当做Action creator，返回Action，会由Redux自动发出。
	const mapDispatchToProps = {
	     onClick:(filter) => {
	 	type:"SET_VISIBILITY_FILTER"，
		filter:filter
	     }
	};


<Provider>组件
1.connect方法生成容器组件以后，需要让容器组件拿到state对象，才能生成UI组件的参数，一种解决方法是将state作为参数传入容器组件。但是，这样做比较麻烦，尤其是容器组件可能在很深的层级，一级级将state传下去就很麻烦
2.React-Redux提供Provider组件，可以让容器组件拿到state。
	import {Provider} from "react-redux";
	import {createStore} from "redux";
	import todoApp from "./reducers";
	import App from "./components/App";
	let store = createStore(todoApp);
	render(
	   <Provider store={store}>
		<App/>
	   </Provider>,
	   document.getElementById("root")
	)
Provider在根组件外面包了一层,这样一来，App的所有子组件就默认都可以拿到state了。
	
实例：计数器
https://github.com/jackielii/simplest-redux-example/blob/master/index.js


React-Router路由库
使用React-Router的项目，与其他项目没有不同之处，也是使用Provider在Router外面包一层，毕竟Provider的唯一功能就是传入store对象。
	const Root = ({store})=>(
	    <Provider store={store}>
		<Router>
		      <Route path="/" component={App}/>
		<Router>
	    </Provider>
	)




	








